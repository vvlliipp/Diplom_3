{"name": "После оформления заказа его номер появляется в разделе В работе", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_Order_feed.TestOrderFeedFunctionality object at 0x000001E130896900>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"b7062a67-fce8-4953-b3e0-5a149ef0cd0e\")>\n\n    @allure.title(\"После оформления заказа его номер появляется в разделе В работе\")\n    def test_order_number_in_work(self, driver):\n        order_page = Order(driver)\n        account_page = Account(driver)\n        main_page = Main(driver)\n        account_page.personal_account()\n        account_page.fill_email()\n        account_page.fill_password()\n        account_page.login_button()\n        main_page.drug_the_bun()\n        main_page.click_place_on_order()\n>       order_number = order_page.get_updated_order_number()\n\ntests\\test_Order_feed.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\Order.py:23: in get_updated_order_number\n    self.wait_text_element_new(OrderFeed.ORDER_NUMBER, \"9999\")\npages\\Stellar_Burger_page.py:43: in wait_text_element_new\n    return WebDriverWait(self.driver, time).until_not(expected_conditions.text_to_be_present_in_element(locator, text))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b7062a67-fce8-4953-b3e0-5a149ef0cd0e\")>\nmethod = <function text_to_be_present_in_element.<locals>._predicate at 0x000001E1308A5EE0>, message = ''\n\n    def until_not(self, method: Callable[[D], T], message: str = \"\") -> Union[T, Literal[True]]:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value evaluates to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`, or\n                  ``True`` if `method` has raised one of the ignored exceptions\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if not value:\n                    return value\n            except self._ignored_exceptions:\n                return True\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:128: TimeoutException"}, "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1730311144755, "stop": 1730311151892, "uuid": "84eabeae-eff7-41c4-95d5-3ebca060dc2d", "historyId": "2ff288a172172eb920f1f96abe669a09", "testCaseId": "551cbd3fcf7af05622e9184cfed8958b", "fullName": "tests.test_Order_feed.TestOrderFeedFunctionality#test_order_number_in_work", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_Order_feed"}, {"name": "subSuite", "value": "TestOrderFeedFunctionality"}, {"name": "host", "value": "DESKTOP-COFSJ1F"}, {"name": "thread", "value": "40360-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_Order_feed"}]}